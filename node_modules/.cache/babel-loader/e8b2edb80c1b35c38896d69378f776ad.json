{"remainingRequest":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/thread-loader/dist/cjs.js!/Users/jina/Desktop/GitHub/todolist_vue/node_modules/babel-loader/lib/index.js!/Users/jina/Desktop/GitHub/todolist_vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jina/Desktop/GitHub/todolist_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jina/Desktop/GitHub/todolist_vue/src/components/List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jina/Desktop/GitHub/todolist_vue/src/components/List.vue","mtime":1593334623560},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { eventBus } from '../main';\nexport default {\n  props: ['todolist'],\n  methods: {\n    listEdit: function listEdit(memo, index, mode, display) {\n      // 수정함수.\n      eventBus.listEdit(memo, index, mode, display); // 이벤트버스로 보내는 항목들.\n\n      this.todolist[index].mode = mode; // 투두리스트의 모드는 = edit 이 된다.\n\n      for (var i = 0; i < this.todolist.length; i++) {\n        if (this.todolist[i].mode === 'add') {\n          this.todolist[i].display = display; // mode 가 edit 이 아닌 리스트들의 버튼을 none 시켜줘야 하기때문에\n          // 나머지 배열의 display 를 'none' 시킨다.\n        }\n      }\n    },\n    starOn: function starOn(index) {\n      // star 가 채워지지 않은 상태라면 \n      this.todolist[index].star = 'block';\n      var starOn = this.todolist[index]; // 눌려진 star 를 starOn 에 담고\n\n      this.todolist.splice(index, 1); // 실제 배열에서의 눌린 값(starOn 에 담겨진 값)을 지우고\n\n      this.todolist.unshift(starOn); // 담아 둔 starOn 을 배열 맨 앞에 넣는다.\n    },\n    starOff: function starOff(index) {\n      // 눌려진 star 의 불을 끌 때면\n      this.todolist[index].star = 'none';\n      var starNum = this.todolist[index].index;\n      var starOff = this.todolist[index]; // 누른 star 를 starOff 에 담고\n\n      var nowStarOn = 0; // 지금 켜져있는 별 갯수 확인\n\n      for (var i = 0; i < this.todolist.length; i++) {\n        if (this.todolist[i].star === 'block') nowStarOn++; // 현재 배열에서 불이 켜져있는 것이 몇개인지 확인한 뒤\n      }\n\n      if (nowStarOn === 0) {\n        // 켜져있는 별이 없다면,\n        this.todolist.splice(index, 1); // 현재 눌린 배열을 지우고\n\n        this.todolist.splice(starNum, 0, starOff); // 불이 켜져 있는것 다음에 아무것도 지우지 말고(0) 아까 담은 starOff 를 그 뒤에 넣는다.\n      } else if (starNum === 0) {\n        this.todolist.splice(index, 1);\n        this.todolist.splice(nowStarOn, 0, starOff);\n      } else {\n        var near = 0;\n        var abs = 0;\n        var min = 100; //해당 범위에서 가장 큰 값\n\n        var nearNum = 0;\n        this.todolist.splice(index, 1);\n\n        for (var _i = 0; _i < this.todolist.length; _i++) {\n          if (this.todolist[_i].star === 'none') {\n            abs = this.todolist[_i].index - starNum < 0 ? -(this.todolist[_i].index - starNum) : this.todolist[_i].index - starNum;\n\n            if (abs < min) {\n              min = abs; //MIN\n\n              near = this.todolist[_i].index;\n              nearNum = _i + 1; //near : 가까운값\n            }\n          }\n        }\n\n        this.todolist.splice(nearNum, 0, starOff);\n      }\n    }\n  }\n};",{"version":3,"sources":["List.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div\n    :class=\"{'done' : list.status === 'done', 'edit' : list.mode === 'edit'}\"\n    v-for=\"(list,index) in todolist\"\n    :key=\"index\"\n    class=\"pa-3 ma-2\">\n      <p class=\"pa-3\">{{ list.memo }}</p>\n      <div class=\"btn_box\">\n        <v-btn\n        v-if=\"list.star === 'none'\"\n        @click=\"starOn(index)\"\n        :disabled=\"list.display === 'none' || list.status === 'done' || list.mode === 'edit'\"\n        fab flat small color=\"red\">\n        <i class=\"far fa-star\"></i>\n        </v-btn>\n        <v-btn\n          v-else-if=\"list.star === 'block'\"\n          @click=\"starOff(index)\"\n          :disabled=\"list.display === 'none' || list.status === 'done' || list.mode === 'edit'\"\n          fab flat small color=\"red\">\n          <i class=\"fas fa-star\"></i>\n        </v-btn>\n        <!-- star 아이콘 -->\n        <!-- 수정 버튼을 눌렀을때도 스타가 눌리면 안되기때문에 disabled 에 list.mode === edit 을 추가했는데, 아예 별 모양을 없애고 싶다면, if 문에 || list.mode === 'edit' 를 넣으면 해결 할 수있다. >> 현재는 별 모양은 남겨놓고 눌리지만 않게 하였다. -->\n        <!-- 완료 버튼을 눌렀을때 스타가 눌리면 안되기때문에 disabled 조건 중 status === done 를 추가했다. -->\n        <v-btn \n          v-if=\"list.status === 'created' &&  list.mode === 'add'\"\n          @click=\"$emit('statusControl', index, 'done')\"\n          :disabled=\"list.display === 'none'\"\n          fab flat small color=\"green\">\n            <i class=\"fas fa-check\"></i>\n        </v-btn> \n        <!--완료-->\n        <v-btn \n          v-else-if=\"list.status === 'done' && list.mode === 'add'\"\n          @click=\"$emit('statusControl', index, 'created')\"\n          :disabled=\"list.display === 'none'\"\n          fab flat small color=\"amber\">\n            <i class=\"fas fa-redo-alt\"></i>\n        </v-btn> \n        <!--부활-->\n        <v-btn \n          v-if=\"list.mode === 'add'\"\n          @click=\"$emit('listDelete', index)\"\n          :disabled=\"list.display === 'none'\"\n          fab flat small color=\"red accent-1\">\n            <i class=\"fas fa-trash-alt\"></i>\n        </v-btn> \n        <!--삭제-->\n        <v-btn \n          v-if=\"list.status === 'created' &&  list.mode === 'add'\"\n          @click=\"listEdit(list.memo, index, 'edit', 'none')\"\n          :disabled=\"list.display === 'none'\"\n          fab flat small color=\"amber\">\n            <i class=\"fas fa-edit\"></i>\n        </v-btn> \n        <!--수정-->\n      </div>         \n      <span\n        v-if=\"list.mode === 'add'\">\n        {{ list.time }}\n      </span>\n    </div> \n  </div>\n  <!-- v-if=\"list.mode === 'add'\" >> 이부분은 수정버튼을 눌렀을때는 수정버튼이 사라지게 하기 위함. -->\n  <!-- 완료 됬을때 수정이 가능하면 안되기 때문에 status 는 create 이어야 한다. -->\n  <!-- :class=\"{'none' : 나머지 === '나머지'}\" -->\n</template>\n\n<script>\nimport { eventBus } from '../main'\nexport default {\n  props:['todolist'],\n  methods:{\n    listEdit(memo, index, mode, display){ // 수정함수.\n      eventBus.listEdit(memo, index, mode, display) // 이벤트버스로 보내는 항목들.\n      this.todolist[index].mode = mode\n      // 투두리스트의 모드는 = edit 이 된다.\n      for (let i=0; i < this.todolist.length; i++) {\n          if(this.todolist[i].mode === 'add') {\n            this.todolist[i].display = display\n            // mode 가 edit 이 아닌 리스트들의 버튼을 none 시켜줘야 하기때문에\n            // 나머지 배열의 display 를 'none' 시킨다.\n          }\n      }\n    },\n    starOn(index){\n      // star 가 채워지지 않은 상태라면 \n      this.todolist[index].star = 'block'\n      let starOn = this.todolist[index] // 눌려진 star 를 starOn 에 담고\n      this.todolist.splice(index, 1) // 실제 배열에서의 눌린 값(starOn 에 담겨진 값)을 지우고\n      this.todolist.unshift(starOn) // 담아 둔 starOn 을 배열 맨 앞에 넣는다.\n    },\n    starOff(index){\n      // 눌려진 star 의 불을 끌 때면\n      this.todolist[index].star = 'none'\n      let starNum = this.todolist[index].index\n      let starOff = this.todolist[index] // 누른 star 를 starOff 에 담고\n      let nowStarOn = 0 // 지금 켜져있는 별 갯수 확인\n      for (let i=0; i < this.todolist.length; i++) {\n        if (this.todolist[i].star === 'block') nowStarOn++ // 현재 배열에서 불이 켜져있는 것이 몇개인지 확인한 뒤\n      }\n      if(nowStarOn === 0 ){ // 켜져있는 별이 없다면,\n        this.todolist.splice(index, 1) // 현재 눌린 배열을 지우고\n        this.todolist.splice(starNum, 0, starOff) // 불이 켜져 있는것 다음에 아무것도 지우지 말고(0) 아까 담은 starOff 를 그 뒤에 넣는다.\n      } else if (starNum === 0){\n        this.todolist.splice(index, 1)\n        this.todolist.splice(nowStarOn, 0, starOff)\n      } else {\n        let near = 0;\n        let abs = 0; \n        let min = 100; //해당 범위에서 가장 큰 값\n        let nearNum = 0;\n        this.todolist.splice(index, 1)\n        for (let i = 0; i < this.todolist.length; i++)\n        {\n          if(this.todolist[i].star === 'none') {\n            abs = ((this.todolist[i].index - starNum) < 0) ? -(this.todolist[i].index - starNum) :\n            (this.todolist[i].index - starNum);\n            if (abs < min)\n            {\n              min = abs; //MIN\n              near = this.todolist[i].index\n              nearNum = i + 1 //near : 가까운값\n            }\n          } \n        }\n        this.todolist.splice(nearNum, 0, starOff)\n      } \n    }\n  }\n}\n</script>\n\n<style>\n\n\n</style>"],"sourceRoot":"src/components"}]}