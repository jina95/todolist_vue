{"remainingRequest":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/babel-loader/lib/index.js!/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/src/views/Home.vue","mtime":1593332891427},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_jina_0628/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport list from './List';\nimport listAdd from './ListAdd';\nexport default {\n  data: function data() {\n    return {\n      todoList: [],\n      toDay: '',\n      nowTime: 0\n    };\n  },\n  components: {\n    list: list,\n    listAdd: listAdd\n  },\n  computed: {\n    countDone: function countDone() {\n      // 완료된 할일 몇개인지 확인.\n      var count = 0;\n\n      for (var i = 0; i < this.todoList.length; i++) {\n        if (this.todoList[i].status === 'done') count++;\n      }\n\n      return count;\n    }\n  },\n  methods: {\n    listTime: function listTime() {\n      // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\n      var hh = new Date().getHours().toString();\n      var mm = new Date().getMinutes().toString();\n      var ss = new Date().getSeconds().toString();\n      return this.nowTime = \" \".concat(hh < 10 ? \"0\".concat(hh) : hh, \":\").concat(mm < 10 ? \"0\".concat(mm) : mm, \":\").concat(ss < 10 ? \"0\".concat(ss) : ss, \" \");\n    },\n    listAdd: function listAdd(memo, index) {\n      // 리스트 추가 함수\n      this.todoList.push({\n        memo: memo,\n        status: \"created\",\n        mode: \"add\",\n        display: 'block',\n        star: 'none',\n        time: this.listTime(),\n        index: index\n      }); // status 는 부활 값 / mode 는 수정인지, 추가인지 확인 / display는 수정버튼 눌렀을때 리스트들 버튼이 사라지는지 생기는지 확인 \n    },\n    statusControl: function statusControl(index, status) {\n      // 완료여부 확인 함수\n      this.todoList[index].status = status;\n    },\n    listDelete: function listDelete(index) {\n      // 제거 함수\n      this.todoList.splice(index, 1);\n    },\n    listEdit: function listEdit(memo, index, mode, display) {\n      // 수정 함수\n      this.todoList[index].memo = memo;\n      this.todoList[index].mode = mode; // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\n\n      this.todoList[index].time = this.listTime();\n\n      for (var i = 0; i < this.todoList.length; i++) {\n        this.todoList[i].display = display;\n      }\n    },\n    resetTime: function resetTime() {\n      var _this = this;\n\n      //실시간으로 현재시간을 업데이트 해주는 함수.\n      setInterval(function () {\n        var date = new Date();\n        var month = date.getMonth();\n        var todayDate = date.getDate();\n        var day = date.getDay();\n        var week = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n        var toDate = \"\".concat(month + 1, \"\\uC6D4\").concat(todayDate, \"\\uC77C  \").concat(week[day], \" \");\n        _this.toDay = toDate;\n      }, 1000);\n    }\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAA,IAAA,MAAA,QAAA;AACA,OAAA,OAAA,MAAA,WAAA;AACA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,gBAAA,EADA;AAEA,aAAA,EAFA;AAGA,eAAA;AAHA,KAAA;AAKA,GAPA;AAQA,cAAA;AAAA,cAAA;AAAA;AAAA,GARA;AASA,YAAA;AACA,aADA,uBACA;AAAA;AACA,UAAA,QAAA,CAAA;;AACA,WAAA,IAAA,IAAA,CAAA,EAAA,IAAA,KAAA,QAAA,CAAA,MAAA,EAAA,GAAA,EAAA;AACA,YAAA,KAAA,QAAA,CAAA,CAAA,EAAA,MAAA,KAAA,MAAA,EAAA;AACA;;AACA,aAAA,KAAA;AACA;AAPA,GATA;AAkBA,WAAA;AACA,YADA,sBACA;AAAA;AACA,UAAA,KAAA,IAAA,IAAA,GAAA,QAAA,GAAA,QAAA,EAAA;AACA,UAAA,KAAA,IAAA,IAAA,GAAA,UAAA,GAAA,QAAA,EAAA;AACA,UAAA,KAAA,IAAA,IAAA,GAAA,UAAA,GAAA,QAAA,EAAA;AAEA,aAAA,KAAA,OAAA,cAAA,KAAA,EAAA,cAAA,EAAA,IAAA,EAAA,cAAA,KAAA,EAAA,cAAA,EAAA,IAAA,EAAA,cAAA,KAAA,EAAA,cAAA,EAAA,IAAA,EAAA,MAAA;AACA,KAPA;AAQA,WARA,mBAQA,IARA,EAQA,KARA,EAQA;AAAA;AACA,WAAA,QAAA,CAAA,IAAA,CAAA;AAAA,cAAA,IAAA;AAAA,gBAAA,SAAA;AAAA,cAAA,KAAA;AAAA,iBAAA,OAAA;AAAA,cAAA,MAAA;AAAA,cAAA,KAAA,QAAA,EAAA;AAAA,eAAA;AAAA,OAAA,EADA,CAEA;AACA,KAXA;AAYA,iBAZA,yBAYA,KAZA,EAYA,MAZA,EAYA;AAAA;AACA,WAAA,QAAA,CAAA,KAAA,EAAA,MAAA,GAAA,MAAA;AACA,KAdA;AAeA,cAfA,sBAeA,KAfA,EAeA;AAAA;AACA,WAAA,QAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAjBA;AAkBA,YAlBA,oBAkBA,IAlBA,EAkBA,KAlBA,EAkBA,IAlBA,EAkBA,OAlBA,EAkBA;AAAA;AACA,WAAA,QAAA,CAAA,KAAA,EAAA,IAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,KAAA,EAAA,IAAA,GAAA,IAAA,CAFA,CAGA;;AACA,WAAA,QAAA,CAAA,KAAA,EAAA,IAAA,GAAA,KAAA,QAAA,EAAA;;AAEA,WAAA,IAAA,IAAA,CAAA,EAAA,IAAA,KAAA,QAAA,CAAA,MAAA,EAAA,GAAA,EAAA;AACA,aAAA,QAAA,CAAA,CAAA,EAAA,OAAA,GAAA,OAAA;AACA;AAEA,KA5BA;AA6BA,aA7BA,uBA6BA;AAAA;;AAAA;AACA,kBAAA,YAAA;AACA,YAAA,OAAA,IAAA,IAAA,EAAA;AACA,YAAA,QAAA,KAAA,QAAA,EAAA;AACA,YAAA,YAAA,KAAA,OAAA,EAAA;AACA,YAAA,MAAA,KAAA,MAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,CAAA;AAEA,YAAA,mBAAA,QAAA,CAAA,mBAAA,SAAA,qBAAA,KAAA,GAAA,CAAA,MAAA;AACA,cAAA,KAAA,GAAA,MAAA;AACA,OATA,EASA,IATA;AAUA;AAxCA;AAlBA,CAAA","sourcesContent":["<template>\n  <v-container>\n    <v-flex text-xs-left>\n      <span class=\"date\">DATE:</span>\n      <p class=\"date_value\" v-bind=\"resetTime()\"> {{ toDay }}</p>\n    </v-flex>\n    <v-layout row wrap class=\"contents_box\">\n      <v-flex xs12 text-xs-center class=\"header_box\">\n        <div><h1>CHECK LIST</h1></div>\n      </v-flex>\n      <v-flex pa-2>\n        <listAdd\n        @listAdd='listAdd'\n        @listEdit='listEdit'\n        ></listAdd>\n        <v-flex class=\"list_box\">\n          <list\n          :todolist='todoList'\n          @statusControl='statusControl'\n          @listDelete='listDelete'\n          ></list>\n        </v-flex>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nimport list from './List'\nimport listAdd from './ListAdd'\nexport default {\n  data() {\n    return {\n      todoList: [],\n      toDay: '',\n      nowTime: 0\n    }\n  },\n  components:{list, listAdd},\n  computed:{\n    countDone(){ // 완료된 할일 몇개인지 확인.\n      let count = 0;\n      for (let i = 0; i < this.todoList.length; i++) {\n        if(this.todoList[i].status === 'done') count++\n      }\n      return count;\n    }\n  },\n  methods: {\n    listTime(){ // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\n      let hh = new Date().getHours().toString()\n      let mm = new Date().getMinutes().toString()\n      let ss = new Date().getSeconds().toString()\n\n      return this.nowTime = ` ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss} `\n    },\n    listAdd(memo, index) { // 리스트 추가 함수\n      this.todoList.push({ memo: memo, status: \"created\", mode: \"add\", display: 'block', star: 'none', time: this.listTime(), index: index})\n      // status 는 부활 값 / mode 는 수정인지, 추가인지 확인 / display는 수정버튼 눌렀을때 리스트들 버튼이 사라지는지 생기는지 확인 \n    },\n    statusControl(index, status){  // 완료여부 확인 함수\n      this.todoList[index].status = status\n    },\n    listDelete(index){ // 제거 함수\n      this.todoList.splice(index, 1)\n    },\n    listEdit(memo, index, mode, display){ // 수정 함수\n      this.todoList[index].memo = memo\n      this.todoList[index].mode = mode\n      // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\n      this.todoList[index].time = this.listTime()\n      \n      for (let i = 0; i < this.todoList.length; i++) {\n      this.todoList[i].display = display\n      }\n\n    },\n    resetTime(){ //실시간으로 현재시간을 업데이트 해주는 함수.\n      setInterval(()=>{\n        let date = new Date();\n        let month = date.getMonth();\n        let todayDate = date.getDate();\n        let day = date.getDay();\n        const week = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n\n        let toDate = `${month+1}월${todayDate}일  ${week[day]} `\n        this.toDay = toDate\n      }, 1000); \n    }\n    \n  }\n}\n</script>\n\n<style>\n</style>"],"sourceRoot":"src/views"}]}