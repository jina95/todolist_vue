{"remainingRequest":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jina/Desktop/GitHub/todolist_vue/src/components/ListAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jina/Desktop/GitHub/todolist_vue/src/components/ListAdd.vue","mtime":1593332489684},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/GitHub/todolist_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { eventBus } from '../main'\nexport default {\n    data(){\n        return {\n            memo: null,\n            mode: 'add',\n            display: null,\n            newIndex: 0\n        }\n    },\n    created(){\n        eventBus.$on('listEdit', (memo, index, mode, display) => {\n            // 리스트에서 edit 버튼을 누른다면, \n            this.memo = memo\n            this.index = index //this.index > data의 index가 없지만, this.index 를 줌으로써 index 칸이 생김.\n            this.mode = mode\n            this.display = display\n        })\n    },\n    methods:{\n        enterKey(event){\n            // 00 을 입력했을때 엔터가 안먹는다.\n            event.preventDefault() //엔터라는 동작 자체를 중단시키는것이라서! (preventDefault()가 없다면 memo 가 null 이 되도 계속해서 값을 가지고 있다.)\n            if(this.mode === 'add') { \n\n                console.log(typeof this.memo === 'string' ? 'string' : 'nono');\n                console.log(`${this.memo} this.memo`);\n\n                // this.memo == !Object > 일때 0 은 false 이기 때문에 앞에 ! not 때문에 true 가 되고 그렇기 때문에 alert 이 뜬다.\n                //  === !과 !== 의 차이는 무엇일까?  \n                // this.memo === !Object  >>> 스페이스바를 눌러 한칸을 띄어도 리스트가 입력된다. \n\n                if(typeof this.memo === 'string' && this.memo.trim() === '') { // memo의 값이 공백이라면 alert 창을 띄워라.\n                    alert('할 일을 등록해 주세요.') \n                    this.memo = null  // enter 로 밑으로 내려가 있는 커서를 다시 올려준다.  \n                         \n                } else {\n                    this.listAdd() // 글자나 숫자 다른게 memo 에 입력되어있다면 listAdd를 실행시킨다.\n                }\n            } else { // mode === 'edit' 일때는 \n                this.listEdit()\n            }\n            \n        },\n        listAdd(){ // 추가버튼을 눌렀을때\n        console.log(this);\n        \n            if(this.memo === null) alert('할 일을 등록해 주세요.')\n            else {\n                \n                this.$emit('listAdd', this.memo, this.newIndex)\n                this.newIndex ++\n                console.log(this.newIndex);\n                \n                this.memo = null\n                \n            }\n        },\n        listEdit(){ // 수정버튼을 눌렀을때\n        console.log(this);\n        \n            if(this.memo === null) alert('할 일을 등록해 주세요.')\n            else {\n                this.mode = 'add'\n                this.display = 'block' // 수정이 완료 되었기 때문에 버튼을 block 시키기 위해 값을 보낸다.\n                this.$emit('listEdit', this.memo, this.index, this.mode, this.display)\n                this.memo = null; // 완료 된 뒤에 메모 값을 다시 초기화 시켜야 한다.\n\n                //mode를 같이 넘긴다.\n                // 단 수정 완료 버튼이기때문에 mode 를 add 로 먼저 바꿔 준 뒤, 에밋으로 값을 올린다. 그 이후에 메모값을 null 로 바꿔줘야 칸의 값이 초기화가 된다.\n            }\n        }\n    }\n}\n",{"version":3,"sources":["ListAdd.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ListAdd.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"list_add\">\n        <textarea\n          v-model=\"memo\"\n          rows=\"5\"\n          placeholder=\"투두리스트를 입력해 주세요.\"\n          @keypress.enter=\"enterKey\"\n        ></textarea>\n        <v-btn\n        v-if=\"mode === 'add'\"\n        @click='listAdd'\n        >등록하기</v-btn>\n        <v-btn\n        v-else\n        @click='listEdit'\n        >수정하기</v-btn>\n    </div>\n</template>\n\n<script>\nimport { eventBus } from '../main'\nexport default {\n    data(){\n        return {\n            memo: null,\n            mode: 'add',\n            display: null,\n            newIndex: 0\n        }\n    },\n    created(){\n        eventBus.$on('listEdit', (memo, index, mode, display) => {\n            // 리스트에서 edit 버튼을 누른다면, \n            this.memo = memo\n            this.index = index //this.index > data의 index가 없지만, this.index 를 줌으로써 index 칸이 생김.\n            this.mode = mode\n            this.display = display\n        })\n    },\n    methods:{\n        enterKey(event){\n            // 00 을 입력했을때 엔터가 안먹는다.\n            event.preventDefault() //엔터라는 동작 자체를 중단시키는것이라서! (preventDefault()가 없다면 memo 가 null 이 되도 계속해서 값을 가지고 있다.)\n            if(this.mode === 'add') { \n\n                console.log(typeof this.memo === 'string' ? 'string' : 'nono');\n                console.log(`${this.memo} this.memo`);\n\n                // this.memo == !Object > 일때 0 은 false 이기 때문에 앞에 ! not 때문에 true 가 되고 그렇기 때문에 alert 이 뜬다.\n                //  === !과 !== 의 차이는 무엇일까?  \n                // this.memo === !Object  >>> 스페이스바를 눌러 한칸을 띄어도 리스트가 입력된다. \n\n                if(typeof this.memo === 'string' && this.memo.trim() === '') { // memo의 값이 공백이라면 alert 창을 띄워라.\n                    alert('할 일을 등록해 주세요.') \n                    this.memo = null  // enter 로 밑으로 내려가 있는 커서를 다시 올려준다.  \n                         \n                } else {\n                    this.listAdd() // 글자나 숫자 다른게 memo 에 입력되어있다면 listAdd를 실행시킨다.\n                }\n            } else { // mode === 'edit' 일때는 \n                this.listEdit()\n            }\n            \n        },\n        listAdd(){ // 추가버튼을 눌렀을때\n        console.log(this);\n        \n            if(this.memo === null) alert('할 일을 등록해 주세요.')\n            else {\n                \n                this.$emit('listAdd', this.memo, this.newIndex)\n                this.newIndex ++\n                console.log(this.newIndex);\n                \n                this.memo = null\n                \n            }\n        },\n        listEdit(){ // 수정버튼을 눌렀을때\n        console.log(this);\n        \n            if(this.memo === null) alert('할 일을 등록해 주세요.')\n            else {\n                this.mode = 'add'\n                this.display = 'block' // 수정이 완료 되었기 때문에 버튼을 block 시키기 위해 값을 보낸다.\n                this.$emit('listEdit', this.memo, this.index, this.mode, this.display)\n                this.memo = null; // 완료 된 뒤에 메모 값을 다시 초기화 시켜야 한다.\n\n                //mode를 같이 넘긴다.\n                // 단 수정 완료 버튼이기때문에 mode 를 add 로 먼저 바꿔 준 뒤, 에밋으로 값을 올린다. 그 이후에 메모값을 null 로 바꿔줘야 칸의 값이 초기화가 된다.\n            }\n        }\n    }\n}\n</script>\n\n<style>\n</style>"]}]}