{"remainingRequest":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/src/components/Home.vue","mtime":1587011586885},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/node_modules/cache-loader/dist/cjs.js","mtime":1584623248505},{"path":"/Users/jina/Desktop/포토폴리오/todolist/todolist-Basic_re/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport list from './List'\nimport listAdd from './ListAdd'\nexport default {\n  data() {\n    return {\n      todoList: [],\n      toDay: '',\n      nowTime: 0\n    }\n  },\n  components:{list, listAdd},\n  computed:{\n    countDone(){ // 완료된 할일 몇개인지 확인.\n      let count = 0;\n      for (let i = 0; i < this.todoList.length; i++) {\n        if(this.todoList[i].status === 'done') count++\n      }\n      return count;\n    }\n  },\n  methods: {\n    listTime(){ // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\n      let hh = new Date().getHours().toString()\n      let mm = new Date().getMinutes().toString()\n      let ss = new Date().getSeconds().toString()\n\n      return this.nowTime = ` ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss} `\n    },\n    listAdd(memo, index) { // 리스트 추가 함수\n      this.todoList.push({ memo: memo, status: \"created\", mode: \"add\", display: 'block', star: 'none', time: this.listTime(), index: index})\n      // status 는 부활 값 / mode 는 수정인지, 추가인지 확인 / display는 수정버튼 눌렀을때 리스트들 버튼이 사라지는지 생기는지 확인 \n    },\n    statusControl(index, status){  // 완료여부 확인 함수\n      this.todoList[index].status = status\n    },\n    listDelete(index){ // 제거 함수\n      this.todoList.splice(index, 1)\n    },\n    listEdit(memo, index, mode, display){ // 수정 함수\n      this.todoList[index].memo = memo\n      this.todoList[index].mode = mode\n      // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\n      this.todoList[index].time = this.listTime()\n      console.log(this);\n      \n      for (let i = 0; i < this.todoList.length; i++) {\n      this.todoList[i].display = display\n      }\n\n    },\n    resetTime(){ //실시간으로 현재시간을 업데이트 해주는 함수.\n      setInterval(()=>{\n        let date = new Date();\n        let month = date.getMonth();\n        let todayDate = date.getDate();\n        let day = date.getDay();\n        const week = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let seconds = date.getSeconds();\n        let toDate = `${month+1}월${todayDate}일  ${week[day]} ` + `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes }`  : minutes }:${seconds < 10 ? `0${seconds }`  : seconds }`\n        this.toDay = toDate\n      }, 1000); \n    }\n    \n  }\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<v-container>\n  <v-layout row wrap>\n    {{ todoList }}\n    <v-flex xs12 text-xs-right>\n    <v-flex xs12 text-xs-center>\n      <h1>TodoList</h1>\n      <p>전체 할 일 : {{ todoList.length }} / 남은 할 일: {{ todoList.length - countDone }} / 완료한 할 일: {{ countDone }}</p>\n      <p v-bind=\"resetTime()\"><i class=\"far fa-clock\"></i> {{ toDay }}</p>\n    </v-flex>\n    <v-flex xs6 pa-2>\n      <list\n      :todolist='todoList'\n      @statusControl='statusControl'\n      @listDelete='listDelete'\n      ></list>\n    </v-flex>\n    <v-flex xs6 pa-2>\n      <listAdd\n      @listAdd='listAdd'\n      @listEdit='listEdit'\n      ></listAdd>\n    </v-flex>\n  </v-layout>\n</v-container>\n</template>\n\n<script>\nimport list from './List'\nimport listAdd from './ListAdd'\nexport default {\n  data() {\n    return {\n      todoList: [],\n      toDay: '',\n      nowTime: 0\n    }\n  },\n  components:{list, listAdd},\n  computed:{\n    countDone(){ // 완료된 할일 몇개인지 확인.\n      let count = 0;\n      for (let i = 0; i < this.todoList.length; i++) {\n        if(this.todoList[i].status === 'done') count++\n      }\n      return count;\n    }\n  },\n  methods: {\n    listTime(){ // 리스트를 추가, 수정 했을때 시간을 나타내주는 함수.\n      let hh = new Date().getHours().toString()\n      let mm = new Date().getMinutes().toString()\n      let ss = new Date().getSeconds().toString()\n\n      return this.nowTime = ` ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss} `\n    },\n    listAdd(memo, index) { // 리스트 추가 함수\n      this.todoList.push({ memo: memo, status: \"created\", mode: \"add\", display: 'block', star: 'none', time: this.listTime(), index: index})\n      // status 는 부활 값 / mode 는 수정인지, 추가인지 확인 / display는 수정버튼 눌렀을때 리스트들 버튼이 사라지는지 생기는지 확인 \n    },\n    statusControl(index, status){  // 완료여부 확인 함수\n      this.todoList[index].status = status\n    },\n    listDelete(index){ // 제거 함수\n      this.todoList.splice(index, 1)\n    },\n    listEdit(memo, index, mode, display){ // 수정 함수\n      this.todoList[index].memo = memo\n      this.todoList[index].mode = mode\n      // edit 이 되었을때 mode 값을 edit > add 로 바꿔줘야 하기 때문에 넘겨주는 mode 값.\n      this.todoList[index].time = this.listTime()\n      console.log(this);\n      \n      for (let i = 0; i < this.todoList.length; i++) {\n      this.todoList[i].display = display\n      }\n\n    },\n    resetTime(){ //실시간으로 현재시간을 업데이트 해주는 함수.\n      setInterval(()=>{\n        let date = new Date();\n        let month = date.getMonth();\n        let todayDate = date.getDate();\n        let day = date.getDay();\n        const week = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let seconds = date.getSeconds();\n        let toDate = `${month+1}월${todayDate}일  ${week[day]} ` + `${hours < 10 ? `0${hours}` : hours}:${minutes < 10 ? `0${minutes }`  : minutes }:${seconds < 10 ? `0${seconds }`  : seconds }`\n        this.toDay = toDate\n      }, 1000); \n    }\n    \n  }\n}\n</script>\n\n<style>\nh1 {\n  font-size: 40px;\n}\n.fa-clock {\n  color: green\n}\n</style>"]}]}